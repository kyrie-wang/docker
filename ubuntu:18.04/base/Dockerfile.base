FROM ubuntu:18.04

ENV DEBIAN_FRONTEND noninteractive

ADD ubuntu:18.04/base/sources.list /etc/apt/

# Git-lfs boost
RUN apt-get update \
    && apt-get install git-all autoconf automake libtool curl wget make cmake g++ unzip vim gdb sudo apt-utils libgflags-dev libgoogle-glog-dev -y \
    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh \
    && apt-get update \
    && apt-get install git-lfs -y \
    && apt-get install libboost-all-dev -y \
    && rm -rf /var/lib/apt/lists/*

# Protobuf
ENV PROTOBUF 3.7.0
ENV PROTOBUF_URL https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF}/protobuf-all-${PROTOBUF}.zip
RUN mkdir software && cd software \
    && wget "${PROTOBUF_URL}" -O protobuf.zip \
    && unzip protobuf.zip \
    && cd protobuf* \
    && ./autogen.sh \
    && ./configure \
    && make -j 8 \
    && make install \
    && ldconfig \
    && cd /software/.. && rm -r software/

ENV GTEST 1.10.0
ENV GTEST_URL https://github.com/google/googletest/archive/refs/tags/release-${GTEST}.zip
RUN mkdir software && cd software \
    && wget "${GTEST_URL}" -O gtest.zip \
    && unzip gtest.zip \
    && cd googletest* \
    && cmake -DBUILD_SHARED_LIBS=ON . \
    && make -j 8 \
    && cp -rf googletest/include/gtest /usr/local/include \
    && cp lib/* /usr/local/lib \
    && cd  /software/.. && rm -r software/

# Eigen
ENV EIGEN 3.4.0
ENV EIGEN_URL https://gitlab.com/libeigen/eigen/-/archive/${EIGEN}/eigen-${EIGEN}.zip
RUN mkdir software && cd software \
    && wget "${EIGEN_URL}" -O eigen-${EIGEN}.zip \
    && unzip eigen-${EIGEN}.zip \
    && mkdir -p eigen-${EIGEN}/build \
    && cd eigen-${EIGEN}/build \
    && cmake .. \
    && make install \
    && cd /software/.. && rm -r software/

# # Proj
ENV SQLITE3 3370200
ENV SQLITE3_URL https://www.sqlite.org/2022/sqlite-autoconf-${SQLITE3}.tar.gz
RUN mkdir software && cd software \
    && wget "${SQLITE3_URL}" -O sqlite-${SQLITE3}.tar.gz \
    && tar xzf sqlite-${SQLITE3}.tar.gz \
    && cd sqlite-autoconf-${SQLITE3} \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

ENV TIFF 4.3.0
ENV TIFF_URL http://download.osgeo.org/libtiff/tiff-${TIFF}.tar.gz
RUN mkdir software && cd software \
    && wget "${TIFF_URL}" -O tiff-${TIFF}.tar.gz \
    && tar xzf tiff-${TIFF}.tar.gz \
    && cd tiff-${TIFF} \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

ENV PROJ 8.2.1
ENV PROJ_URL http://download.osgeo.org/proj/proj-${PROJ}.tar.gz
# ENV PROJ_DATA 1.8
# ENV PROJ_DATA_URL http://download.osgeo.org/proj/proj-data-${PROJ_DATA}.tar.gz
RUN mkdir software && cd software \
    && apt-get update \
    && apt-get install pkg-config libcurl4-openssl-dev -y \
    && wget "${PROJ_URL}" -O proj-${PROJ}.tar.gz \
    # && wget "${PROJ_DATA_URL}" -O proj-data-${PROJ_DATA}.tar.gz \
    && tar xzf proj-${PROJ}.tar.gz \
    && cd proj-${PROJ}/data \
    # && tar xzf ../../proj-data-${PROJ_DATA}.tar.gz \
    && cd .. \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

ENV GEOTIFF 1.7.0
ENV GEOTIFF_URL https://github.com/OSGeo/libgeotiff/releases/download/${GEOTIFF}/libgeotiff-${GEOTIFF}.tar.gz
RUN mkdir software && cd software \
    && wget "${GEOTIFF_URL}" -O libgeotiff-${GEOTIFF}.tar.gz \
    && tar xzf libgeotiff-${GEOTIFF}.tar.gz \
    && cd libgeotiff-${GEOTIFF} \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

# # Liblas
ENV LIBLAS 1.8.1
ENV LIBLAS_URL https://github.com/libLAS/libLAS/archive/refs/tags/${LIBLAS}.zip
RUN mkdir software && cd software \
    && wget "${LIBLAS_URL}" -O liblas-${LIBLAS}.zip \
    && unzip liblas-${LIBLAS}.zip \
    && cd libLAS-${LIBLAS} \
    && mkdir makefiles \
    && cd makefiles \
    && cmake -G "Unix Makefiles" ../ \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/


# GEOS
ENV GEOS 3.7.3
ENV GEOS_URL http://download.osgeo.org/geos/geos-${GEOS}.tar.bz2
RUN mkdir software && cd software \
    # For SpatiaLite
    && apt-get update \
    && apt-get install libfreexl-dev librttopo-dev libxml2-dev libminizip-dev -y \
    && wget "${GEOS_URL}" -O geos-${GEOS}.tar.bz2 \
    && tar xjf geos-${GEOS}.tar.bz2 \
    && cd geos-${GEOS} \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

# Gdal
ENV GDAL 3.4.1
ENV GDAL_URL http://download.osgeo.org/gdal/${GDAL}/gdal-${GDAL}.tar.gz
RUN mkdir software && cd software \
    && wget "${GDAL_URL}" -O gdal-${GDAL}.tar.gz \
    && tar xzf gdal-${GDAL}.tar.gz \
    && cd gdal-${GDAL} \
    && ./configure \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/


# PCL
ENV PCL 1.12.1
ENV PCL_URL https://github.com/PointCloudLibrary/pcl/archive/refs/tags/pcl-${PCL}.zip
RUN mkdir software && cd software \
    && apt-get update \
    && apt-get install libflann-dev build-essential libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev -y \
    && wget "${PCL_URL}" -O pcl-${PCL}.zip \
    && unzip pcl-${PCL}.zip \
    && cd pcl-pcl-${PCL} \
    && mkdir build \
    && cd build \
    && cmake -DCMAKE_BUILD_TYPE=Release .. \
    && make -j8 \
    && make install \
    && ln -s /usr/local/include/pcl-1.12/pcl /usr/local/include/pcl \
    && cd /software/.. && rm -r software/

# OpenCV
ENV OPENCV 4.5.5
ENV OPENCV_URL https://github.com/opencv/opencv/archive/refs/tags/${OPENCV}.zip
RUN mkdir software && cd software \
    && wget "${OPENCV_URL}" -O opencv-${OPENCV}.zip \
    && unzip opencv-${OPENCV}.zip \
    && cd opencv-${OPENCV} \
    && mkdir build && cd build \
    && cmake -D CMAKE_BUILD_TYPE=RELEASE .. \
    && make -j8 \
    && make install \
    && cd /software/.. && rm -r software/

